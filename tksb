#!/usr/bin/wish

package require Tk
package require udp

proc start {{height 24}} {
    set ::status "(no status)"

    . configure -borderwidth 0 -bg #28e

    wm title . clock
    wm iconname . clock
    wm geometry . [winfo screenwidth .]x$height

    wm overrideredirect . 1
    #wm attributes . -topmost 0
    wm resizable . 0 0

    font create font(.d.t) -family {Inconsolata} -size [expr $height / 2 - 3]
    font create font(.d.w) -family {Inconsolata} -size [expr $height / 2 - 3] -weight bold
    font create font(.d.m) -family {Inconsolata} -size [expr $height / 2 - 3]
    font create font(.s)   -family {Inconsolata} -size [expr $height / 2 - 3] -weight bold
    font create font(.n)   -family {Inconsolata} -size [expr $height / 2 - 3]

    # Date and time
    frame  .d
    button .d.t -textvar time -bg #444 -fg #fff
    button .d.w -textvar wday -bg #fff -fg darkred
    button .d.m -textvar mday -bg #444 -fg #fff

    # Status
    button .s -textvar status -bg #a6e -fg #fff -font font(.s) -command {exec tm}

    # Notices
    frame .n
    set nbg {#fac #fc9 #fe7 #dc5 #ada #7ef #acf #abc #aa9}
    set nfg {#000 #000 #000 #000 #000 #110 #000 #000 #000}
    foreach i {1 2 3 4 5 6 7 8 9} {
        set ::msg($i) ""
        button .n.$i -textvar msg($i)
        .n.$i configure -anchor nw -font font(.n) -bd 0 -highlightthickness 0 -padx 6 -pady 3 -relief flat -command "ack $i"
        .n.$i configure -bg [lindex $nbg [expr $i - 1]] -fg [lindex $nfg [expr $i - 1]]
    }

    foreach w {.d.t .d.w .d.m .s} {
        $w configure -anchor nw -font font($w) -bd 0 -highlightthickness 0 -padx 6 -pady 3 -relief flat
    }
    pack .d -side left -anchor n -expand 0 -fill both
    pack .s -side left -anchor n -expand 0 -fill both
    pack .n -side left -anchor n -expand 1 -fill both
    foreach w {.d.t .d.w .d.m .s} { pack $w -side left -anchor n -expand 0 -fill x }

    set sock [udp_open 9093]
    fconfigure $sock -buffering none -translation binary
    fileevent $sock readable [list handle_input $sock]

    refresh
    every 1000 {refresh}
}

proc reconf {prop value i} {
    if {[string eq $i ""]} {
        foreach i {1 2 3 4 5 6 7 8 9} {
            .n.$i configure $prop $value
        }
    } else {
        .n.$i configure $prop $value
    }
}

proc handle_input {channel} {
    set str [gets $channel]
    if {[regexp {^([1-9])?:(.+)} $str match i msg]} {
        post $msg $i
    } elseif {[regexp {^([1-9])?B(.+)} $str match i color]} {
        reconf -bg $color $i
    } elseif {[regexp {^([1-9])?F(.+)} $str match i color]} {
        reconf -fg $color $i
    } elseif {[regexp {^([1-9])!(.+)} $str match i cmd]} {
        reconf -command $cmd "exec ssid -n $cmd &" $i
    } elseif {[regexp {^!(.+)} $str match cmd]} {
        .s configure -command "exec ssid -n $cmd &"
    } elseif {[string equal $str {!!}]} {
        .s configure -command "exec tm"
    } elseif {[string equal $str {--}]} {
        ack {}
    } elseif {[regexp {^([1-9]?)-} $str match i]} {
        ack $i
    } elseif {[regexp {^@(.+)} $str match ::status]} {
        # ::status]} {
        #set ::status $s
        # Nothing more to do
    }
}

proc hide {i} {
    pack forget .n.$i
}

proc show {i} {
    pack .n.$i -side left -anchor n -expand 0 -fill both
}

proc clear {i} {
    set ::msg($i) ""
}

proc post {msg i} {
    if {[string equal $i ""]} {
        set i [nextMsg]
        pack .n.$i -side left -anchor n -expand 0 -fill both
    }
    set ::msg($i) "($i) $msg"
}

proc nextMsg {} {
    foreach i {1 2 3 4 5 6 7 8 9} {
        if { $::msg($i) == "" } { return $i }
    }
    return 0
}

proc ackall {} {
    foreach i {1 2 3 4 5 6 7 8 9} { ack $i }
}

proc ack {i} {
    if {[string equal $i {}]} {
        foreach i {1 2 3 4 5 6 7 8 9} {
            hide $i
            clear $i
        }
    } else {
        hide $i
        clear $i
    }
}

proc every {ms body} {
   eval $body
   after $ms [list every $ms $body]
}

proc refresh {} {
    set s [clock sec]
    set t [clock format $s -format "%H:%M:%S %a %b %d"]
    set ::time [string range $t  0  7]
    set ::wday [string range $t  9 11]
    set ::mday [string range $t 13 18]
}

proc test {} {
    foreach i {1 2 3 4 5 6 7 8 9} {
        after [expr $i * 100 - 100] "post {note $i}"
    }
}

if {$::argc == 0} {
    start 24
} else {
    start [lindex $::argv 0]
}
